{
    "version": "0.1",
    "pageContent": 
	{
        "_comments": "object that contains data for page labels, buttons, etc.",
        "navItems": 
		{
            "_common": 
			{
                "buttonBackToGallery": 
				{
                    "name": "Back To Gallery",
					"method": "backToGallery()",
					"idName": "backToGallery"	
                },
                "buttonStartTutorial": 
				{
                    "name": "Start Tutorial",
					"method": "startTutorialFromDetailsScreen()",
					"idName": "startTutorial"
                },
				"buttonViewDetails": 
				{
                    "name": "View Details",
					"method": "viewDetails()",
					"idName": "stepsViewDetails"	
                }
            }
        }
    },
    "tutorial": 
	{
        "_common": 
		{
            "name": "MQ - Using the MQInput, MQGet and MQOutput nodes with messages and queues",
            "shortDescription": "Learn how to use the MQInput, MQGet and MQOutput nodes to interact with queues defined on a local queue manager.",
            "durationText": "This tutorial takes approximately",
            "durationTime": "10 minutes",
            "_resourceToOpenComment": "The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
            "resourceToOpen": "MainFlow",
            "helpLink": 
			{
                "text": "IBM Documentation",
           		"link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"
            }
        },
        "pageDetails": 
		{
            "topicsName": "Tutorial topics",
            "_topicListComment": "A short list of product concepts or tasks demonstrated by this tutorial",
            "topicList": 
			[
                {
                    "title": "MQInput node"
                },
				{
                    "title": "MQOutput node"
                },
				{
                    "title": "MQGet node"
                }
            ],
            "outcomesName": "Learning outcomes",
            "_outcomesComment": "A description of what the user will have learned or accomplished by running this tutorial.",
            "outcomeList": 
			[
                {
                    "title": "Use IBM App Connect Enterprise to interact with queues defined on a local queue manager."
                }
            ],
            "summary": 
			{
                "overviewName": "OVERVIEW",
                "_overviewComment": "A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
                "sections": 
				[
                    {
                        "section": "This tutorial demonstrates two simple message flows. The first is driven from an input XML file which contains data representing three famous couples (Romeo and Juliet, Lennon and McCartney, Laurel and Hardy). After this data is read by a FileInput node, a Compute node iterates over the data and divides each pair. MQOutput nodes send separate messages with the name of one person to one queue and the name of the other person to a second queue. Both MQ messages are given the same MsgId in their MQMD header. A second message flow is driven by an MQInput node reading one of these messages from its queue. Next an MQGet node uses the MsgId to read in the second message. Finally a downstream Trace node writes out a trace file containing both pieces of data reunited together."
                    },
                    {
                        "section": "The tutorial requires an integration node owned server, or a standalone server."
                    },
                    {
                        "section": "In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses MQ nodes which are configured to interact with a local queue manager. The flows expect to be deployed to an integration node associated with a local queue manager. There are no other pre-requisites needed by the scenario."
                    }
                ]
            },
			"helpLinks": 
			{
				"_helpLinksComment": "Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
				"title": "Find out more",
				"details": 
				[
					{
						"title": "IBM Documentation link to ",
						"description": "Developing integration solutions by using applications",
						"link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm",
						"type": "web"
					}
				]
			}
        },
        "pageSteps": 
		{
            "create": 
			{
                "overview": 
				{
                    "name": "Create",
                    "heading": "Import projects",
                    "_createComment": "A description of what will happen when the user clicks Import.",
                    "sections": 
					[
                        {
                            "section": "When you click Import, a project will be created in your workspace: An application named <span class='application'>ExampleMQ</span>."
                        },
                        {
                            "section": "<span class='application'>ExampleMQ</span> provides two message flows named <span class='resource'>MQOutput</span> and <span class='resource'>MQInput_MQGet</span>."
						},
						{
							"section": "The <span class='resource'>MQOutput</span> message flow is driven by a FileInput node configured to receive an XML input message containing three famous couples (Romeo and Juliet, Lennon and McCartney, Laurel and Hardy). The FileInput is wired to a Compute node which loops over the data, dividing each pair. MQOutput nodes send separate messages (but both given the same MsgId) with the name of one person to QUEUE1 and the name of the other person to QUEUE2"
						},
						{
							"section": "The <span class='resource'>MQInput_MQGet</span> message flow uses an MQInput node to read a message from QUEUE1. Next, an MQGet node reads the associated message (using the matching MsgId) from QUEUE2. Finally a Trace node records the re-unified information from the message pair to a local file."
						},
                        {
			    			"section": "Once imported using the link on the right, the application <span class='application'>ExampleMQ</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
						}
                    ]
                },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[
                        {
                            "title": "IBM Documentation link to ",
                            "description": "Developing integration solutions by using applications",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm",
							"type": "web"
                        }
                    ]
                },
                "actions": 
				{
                    "title": "Create Actions",
                    "details": 
					[
                        {
                            "name": "Import",
                            "method": "importArtifacts()"
                        }
                    ]
                }
            },
            "prepare": 
			{
                "overview": 
				{
                    "name": "Prepare",
                    "heading": "Prepare a trace directory, create a queue manager and integration node, and then deploy the message flows",
                    "_prepareComment": "A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
                    "sections": 
		     [
			 {
                     "section":"The tutorial includes a Trace node which uses a trace directory. The tutorial also requires MQ definitions for two queues.  Execute the following steps to prepare your environment accordingly:",
                     "steps":{
                        "type":"ordered",
                        "details":[
                           	{
                    			"details":"The message flow's Trace node will attempt to write a trace file to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment. The tutorial scenario also uses a FileInput node which is configured to read from this directory, so if you choose an alternative you will also need to modify this part of the flow."
                    		},
						   	{
                              "details":"Create an IBM MQ queue manager and configure it by completing the following steps:",
                              "substeps":{
                                 "type":"ordered",
                                 "details":[
                                    {
                                       "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'>TESTQM</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'>TESTQM</span></code>"
                                    },
                                    {
                                       "details":"Next create the two queues by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>define ql(QUEUE1)</code><br><code>define ql(QUEUE2)</code>"
                                    }									
                                 ]
                              }
                           },                           
                           {
                              "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                              "substeps":{
                                 "type":"ordered",
                                 "details":[
                                    {
                                       "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>TESTQM</span></code>"
                                    },
									{
                                       "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                                    },
                                    {
                                       "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                                    }
                                 ]
                              }
                           },
						   {
						   		"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>ExampleMQ.bar</span> which you will find inside the <span class='application'>ExampleMQ</span> application."
                    		}							
                        ]
                     }
                  }
             ]
                },
                "helpLinks": 
				{
                }
            },
            "run": 
			{
                "overview": 
				{
                    "name": "Run",
                    "heading": "",
                    "_runComment": "The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
                "sections":[                            
                            {
                                "section": "<h4>Use the Flow Exerciser to test the tutorial scenario",
                                "steps": {
                                    "type": "ordered",
                                    "details": [                                      
                                    {
                                        "details": "Open <span class='resource'>MQOutput.msgflow</span>.",
                                        "substeps":{
                                        "type": "unordered",
                                        "details": 
								        [
                                        {
                                          "details": "Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                                        },										
										{
                                            "details": "Copy the input file named <span class='resource'>input.xml</span> to the input directory which is being monitored by the FileInput node deployed as part of message flow <span class='resource'>MQOutput</span>, which by default is <span class='resource'>C:\\temp</span>."
                                        },
										{
                                            "details": "Click the View Path icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png' alt='' /> and a blue line is plotted showing the path travelled by the message through the flow. You can click on the wires between nodes to view what the message data looked like at different points in the flow."
                                        },										
										{
                                            "details": "To inspect the result of the second message flow <span class='resource'>MQInput_MQGet.msgflow</span>, using a text editor open the trace file <span class='resource'>C:\\temp\\TraceMQInput_MQGet.txt</span>, which should contain three entries with correctly re-paired data like this:<br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-13 13:20:49.080488</code><br><code>The message from the MQInput node queue is placed in the Root of the logical message tree</code><br><code>The message from the MQGet node queue is placed in the location Environment.ReadByMQGetNodeOffQueue</code><br><code>The pairing is:  'Romeo' and 'Juliet'</code><br><code>================================================================================</code><br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-13 13:20:49.082225</code><br><code>The message from the MQInput node queue is placed in the Root of the logical message tree</code><br><code>The message from the MQGet node queue is placed in the location Environment.ReadByMQGetNodeOffQueue</code><br><code>The pairing is:  'Lennon' and 'McCartney'</code><br><code>================================================================================</code><br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-13 13:20:49.083049</code><br><code>The message from the MQInput node queue is placed in the Root of the logical message tree</code><br><code>The message from the MQGet node queue is placed in the location Environment.ReadByMQGetNodeOffQueue</code><br><code>The pairing is:  'Laurel' and 'Hardy'</code><br><code>================================================================================</code>"										
										}
                                        ]
                                        }
                                    }
                                ]
                            }
                        },
			{
			    "section": "This tutorial has shown how to use the MQInput, MQGet and MQOutput nodes to interact with queues defined on a local queue manager."			
			}
                    ]
                },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[
 						{
                            "title": "IBM Documentation link to ",
                            "description": "MQInput node",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04560_.htm",
							"type": "web"
                        },
 						{
                            "title": "IBM Documentation link to ",
                            "description": "MQOutput node",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04570_.htm",
							"type": "web"
                        },
						 						{
                            "title": "IBM Documentation link to ",
                            "description": "MQGet node",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20806_.htm",
							"type": "web"
                        },						
						{
                            "title": "IBM Documentation link to ",
                            "description": "Testing your message flow by using the Flow exerciser",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm",
							"type": "web"
                        }
                    ]
                }
            }
        }
    }
}